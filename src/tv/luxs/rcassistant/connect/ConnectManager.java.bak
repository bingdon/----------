package tv.luxs.rcassistant.connect;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.net.Socket;
import java.net.SocketException;
import java.net.UnknownHostException;

import android.util.Log;
import tv.luxs.config.G;
import tv.luxs.rcassistant.utils.Utils;

/**
 * 机顶盒连接管理理器
 */
public class ConnectManager {
	
	static Socket socket = null;
	static DataOutputStream dos = null;
	static DataInputStream dis = null;
	static boolean isConected = false;
	public static String myhost="";
	
	/**
	 * 执行链接
	 * @param host
	 * @return
	 */
	public static boolean connectServer(String host){
    	try {
    		if(!isConected){
	    		Utils.log("connecting" + host);
				socket = new Socket(host, G.PORT);
				Utils.log("socket true");
				dos = new DataOutputStream(socket.getOutputStream());
				dis = new DataInputStream(socket.getInputStream());
				Utils.log("dos true");
				isConected = true;
				myhost=host;
				new RecvThread().start();
    		}
			return true;
		} catch (UnknownHostException e) {
			Utils.log("UnknownHostException");
			e.printStackTrace();
			close();
		} catch (IOException e) {
			Utils.log("IOException");
			e.printStackTrace(); 
			close();
		} 
    	return false; 
    } 
	
	/**
	 * 是否已连接
	 */
	public static boolean isConnected(){ 
    	try {
			if(socket != null){
				socket.sendUrgentData(0xFF);
				return true;
			}
		} catch (Exception e) {
			e.printStackTrace();
			close();
		}
    	return false;
    	
    }
	
	/**
	 * 发送指令
	 * @param info
	 */
	public static boolean send(String info){ 
    	try {
    		Log.i("ConnectManager", "socket:"+socket);
    		
			if(socket != null && dos != null){
				Log.i("ConnectManager", "CURRENT_VALUE:"+G.CURRENT_VALUE);
				if(!"".equals(G.CURRENT_VALUE)) {
					dos.writeUTF((G.CURRENT_VALUE + "#" + info));
					Utils.log(G.CURRENT_VALUE + "#" + info);
				} else {
					dos.writeUTF((G.CURRENT_VALUE + "#" + info));
//					dos.writeUTF(("liubing" + "#" + info));
//					dos.writeInt(Integer.parseInt(info));
				}
				dos.flush();
				return true;
			}
		} catch (UnknownHostException e) {
			e.printStackTrace();
			Utils.log("UnknownHostException");
			close();
		} catch (IOException e) {
			e.printStackTrace();
			Utils.log("IOException");
			close();
		}
    	return false;
    }
	
	/**
	 * 启动更新随机码线程
	 */
	public static class RecvThread extends Thread {

		public void run() {
			try {
				Utils.log("启动更新随机码线程"+"连接:"+isConected);
//				Log.i("ConnectManager", "输入流:"+dis);
//				Log.i("ConnectManager", "输入流:"+dis.read());
				while(isConected) {
//					Log.i("ConnectManager", "输入流:"+dis);
					String str = dis.readUTF();
					Log.i("ConnectManager", "机顶盒端读入:"+str);
					Utils.log(str);
					if(!"".equals(str) && str.length() > 8 && str.indexOf("#") != -1){
						G.CURRENT_VALUE = str.substring(str.indexOf("#") + 1);
						Utils.log(G.CURRENT_VALUE);
					}
					
				}
			} catch (SocketException e) {
				Utils.log("SocketException 机顶盒端已退出！");
				close();
			} catch (EOFException e) {
				Utils.log("EOFException 机顶盒端已退出！");
				close();
			} catch (IOException e) {
				e.printStackTrace();
				Utils.log("IOException 机顶盒退出");
				close();
			}
			
		}
		
	}
	
	/**
	 * 断开链接
	 */
	public static void close(){
		try {
			isConected = false;
			if(socket != null) socket.close();
			if(dos != null ) dos.close();
			if(dis != null ) dis.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}

}
